// # -*- mode: c -*-
#pragma once

#include "defs.h"
#include "weight_defs_DOUBLE.h"

#ifdef __AVX512F__
#include "avx512_calls.h"
#endif

#ifdef __AVX__
#include "avx_calls.h"
#endif

#ifdef __SSE4_2__
#include "sse_calls.h"
#endif

#include <stdint.h>

typedef union {
#ifdef __AVX512F__
  AVX512_FLOATS a512;/* add the bit width for vector register*/
#endif
#ifdef __AVX__
  union {
    AVX_FLOATS a;
    AVX_FLOATS a256;
  };
#endif
#ifdef __SSE4_2__
    union {
      SSE_FLOATS s;
      SSE_FLOATS s128;
    };
#endif
    DOUBLE d;
} weight_union_DOUBLE;

// Info about a particle pair that we will pass to the weight function
typedef struct
{
    weight_union_DOUBLE weights0[MAX_NUM_WEIGHTS];
    weight_union_DOUBLE weights1[MAX_NUM_WEIGHTS];
    weight_union_DOUBLE dx, dy, dz;
    
    // These will only be present for mock catalogs
    weight_union_DOUBLE parx, pary, parz;
    
    int64_t num_weights;
} pair_struct_DOUBLE;

typedef DOUBLE (*weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#ifdef __AVX512F__
typedef AVX512_FLOATS (*avx512_weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#endif
#ifdef __AVX__
typedef AVX_FLOATS (*avx_weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#endif
#ifdef __SSE4_2__
typedef SSE_FLOATS (*sse_weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#endif

//////////////////////////////////
// Weighting functions
//////////////////////////////////

/*
 * The pair weight is the product of the particle weights
 */
static inline DOUBLE pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->weights0[0].d*pair->weights1[0].d;
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX512_MULTIPLY_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512);
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX_MULTIPLY_FLOATS(pair->weights0[0].a, pair->weights1[0].a);
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return SSE_MULTIPLY_FLOATS(pair->weights0[0].s, pair->weights1[0].s);
}
#endif

/*
 * The pair weight is 1 if two weights equal and 0 elsewhere
 */
static inline DOUBLE pair_and_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->weights0[0].d == pair->weights1[0].d;
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_pair_and_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX512_COMPARE_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512, _CMP_EQ_OQ);
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_pair_and_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX_COMPARE_FLOATS(pair->weights0[0].a, pair->weights1[0].a, _CMP_EQ_OQ);
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_pair_and_DOUBLE(const pair_struct_DOUBLE *pair){
    return SSE_MULTIPLY_FLOATS(SSE_COMPARE_FLOATS_GE(pair->weights0[0].s, pair->weights1[0].s),
            SSE_COMPARE_FLOATS_LE(pair->weights0[0].s, pair->weights1[0].s));
}
#endif

/*
 * The pair weight is the product of the particle weights if the separation between pairs is less
 * than the last number in weight_array. The input shape should be: (weight, x, y, z, sep)
 */
static inline DOUBLE pair_product_smallscalecut_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->weights0[0].d*pair->weights1[0].d * 
           (
            ((pair->weights0[1].d-pair->weights1[1].d)*(pair->weights0[1].d-pair->weights1[1].d)+
            (pair->weights0[2].d-pair->weights1[2].d)*(pair->weights0[2].d-pair->weights1[2].d)+
            (pair->weights0[3].d-pair->weights1[3].d)*(pair->weights0[3].d-pair->weights1[3].d))
            < pair->weights0[4].d*pair->weights1[4].d
            );
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_pair_product_smallscalecut_DOUBLE(const pair_struct_DOUBLE *pair){
    AVX512_FLOATS pair_sep_1 = AVX512_SUBTRACT_FLOATS(pair->weights0[1].a512, pair->weights1[1].a512);
    AVX512_FLOATS pair_sep_2 = AVX512_SUBTRACT_FLOATS(pair->weights0[2].a512, pair->weights1[2].a512);
    AVX512_FLOATS pair_sep_3 = AVX512_SUBTRACT_FLOATS(pair->weights0[3].a512, pair->weights1[3].a512);
    pair_sep_1 = AVX512_MULTIPLY_FLOATS(pair_sep_1, pair_sep_1);
    pair_sep_2 = AVX512_MULTIPLY_FLOATS(pair_sep_2, pair_sep_2);
    pair_sep_3 = AVX512_MULTIPLY_FLOATS(pair_sep_3, pair_sep_3);
    AVX512_FLOATS pair_sep = AVX512_ADD_FLOATS(AVX512_ADD_FLOATS(pair_sep_1, pair_sep_2), pair_sep_3);
    
    return AVX512_MULTIPLY_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512) * 
            AVX512_COMPARE_FLOATS(pair_sep
                , AVX512_MULTIPLY_FLOATS(pair->weights0[4].a512, pair->weights1[4].a512), _CMP_GT_OS);
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_pair_product_smallscalecut_DOUBLE(const pair_struct_DOUBLE *pair){
    AVX_FLOATS pair_sep_1 = AVX_SUBTRACT_FLOATS(pair->weights0[1].a, pair->weights1[1].a);
    AVX_FLOATS pair_sep_2 = AVX_SUBTRACT_FLOATS(pair->weights0[2].a, pair->weights1[2].a);
    AVX_FLOATS pair_sep_3 = AVX_SUBTRACT_FLOATS(pair->weights0[3].a, pair->weights1[3].a);
    pair_sep_1 = AVX_MULTIPLY_FLOATS(pair_sep_1, pair_sep_1);
    pair_sep_2 = AVX_MULTIPLY_FLOATS(pair_sep_2, pair_sep_2);
    pair_sep_3 = AVX_MULTIPLY_FLOATS(pair_sep_3, pair_sep_3);
    AVX_FLOATS pair_sep = AVX_ADD_FLOATS(AVX_ADD_FLOATS(pair_sep_1, pair_sep_2), pair_sep_3);
    
    return AVX_MULTIPLY_FLOATS(pair->weights0[0].a, pair->weights1[0].a) * 
            AVX_COMPARE_FLOATS(pair_sep
                , AVX_MULTIPLY_FLOATS(pair->weights0[4].a, pair->weights1[4].a), _CMP_GT_OS);
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_pair_product_smallscalecut_DOUBLE(const pair_struct_DOUBLE *pair){
    SSE_FLOATS pair_sep_1 = SSE_SUBTRACT_FLOATS(pair->weights0[1].s, pair->weights1[1].s);
    SSE_FLOATS pair_sep_2 = SSE_SUBTRACT_FLOATS(pair->weights0[2].s, pair->weights1[2].s);
    SSE_FLOATS pair_sep_3 = SSE_SUBTRACT_FLOATS(pair->weights0[3].s, pair->weights1[3].s);
    pair_sep_1 = SSE_MULTIPLY_FLOATS(pair_sep_1, pair_sep_1);
    pair_sep_2 = SSE_MULTIPLY_FLOATS(pair_sep_2, pair_sep_2);
    pair_sep_3 = SSE_MULTIPLY_FLOATS(pair_sep_3, pair_sep_3);
    SSE_FLOATS pair_sep = SSE_ADD_FLOATS(SSE_ADD_FLOATS(pair_sep_1, pair_sep_2), pair_sep_3);
    
    return SSE_MULTIPLY_FLOATS(pair->weights0[0].s, pair->weights1[0].s) * 
            SSE_COMPARE_FLOATS_GT(pair_sep, SSE_MULTIPLY_FLOATS(pair->weights0[4].s, pair->weights1[4].s));
}
#endif


//////////////////////////////////
// Utility functions
//////////////////////////////////


/* Gives a pointer to the weight function for the given weighting method
 * and instruction set.
 */
static inline weight_func_t_DOUBLE get_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &pair_product_DOUBLE;
        case PAIR_AND:
            return &pair_and_DOUBLE;
        case PAIR_PRODUCT_SMALLSCALECUT:
            return &pair_product_smallscalecut_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}

#ifdef __AVX512F__
static inline avx512_weight_func_t_DOUBLE get_avx512_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &avx512_pair_product_DOUBLE;
        case PAIR_AND:
            return &avx512_pair_and_DOUBLE;
        case PAIR_PRODUCT_SMALLSCALECUT:
            return &avx512_pair_product_smallscalecut_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}
#endif


#ifdef __AVX__
static inline avx_weight_func_t_DOUBLE get_avx_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &avx_pair_product_DOUBLE;
        case PAIR_AND:
            return &avx_pair_and_DOUBLE;
        case PAIR_PRODUCT_SMALLSCALECUT:
            return &avx_pair_product_smallscalecut_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}
#endif

#ifdef __SSE4_2__
static inline sse_weight_func_t_DOUBLE get_sse_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &sse_pair_product_DOUBLE;
        case PAIR_AND:
            return &sse_pair_and_DOUBLE;
        case PAIR_PRODUCT_SMALLSCALECUT:
            return &sse_pair_product_smallscalecut_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}
#endif
